//
//  MessagesViewController.swift
//  IjomeMessage
//
//  Created by Benny Pollak on 10/9/18.
//  Copyright Â© 2018 Alben Software. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    var currentIjome:Ijome?
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {

        if let message = conversation.selectedMessage {
            currentIjome = Ijome(message: message)
            captionTxt.text = (currentIjome?.caption)!
            image.image = UIImage(named: (currentIjome?.imageName)!)
        } else {
            // Remove any child view controllers that have been presented.
            removeAllChildViewControllers()
            
            /// - Tag: PresentViewController
            let controller: CollectionViewController
            if presentationStyle == .compact {
                controller = instantiateViewController() as! CollectionViewController
            } else {
                controller = instantiateViewController() as! CollectionViewController
            }
            controller.activeConversation = conversation
            addChild(controller)
            controller.view.frame = view.bounds
            controller.view.translatesAutoresizingMaskIntoConstraints = false
            view.addSubview(controller.view)
            
            NSLayoutConstraint.activate([
                controller.view.leftAnchor.constraint(equalTo: view.leftAnchor),
                controller.view.rightAnchor.constraint(equalTo: view.rightAnchor),
                controller.view.topAnchor.constraint(equalTo: view.topAnchor),
                controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
                ])
            
            controller.didMove(toParent: self)
        }





    }
    private func instantiateViewController() -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: "CollectionViewController")
            as? CollectionViewController
            else { fatalError("Unable to instantiate an CollectionViewController from the storyboard") }
        
//        controller.delegate = self
        
        return controller
    }
    @IBOutlet weak var sendBtn: UIButton!
    @IBOutlet weak var captionTxt: UITextField!
    @IBOutlet weak var image: UIImageView!
    @IBAction func send(_ sender: Any) {
        let layout = MSMessageTemplateLayout()
        let caption = captionTxt.text
        let imageName = (currentIjome?.imageName)!
        layout.caption = captionTxt.text
//        layout.imageSubtitle = "imageSubtitle"
//        layout.imageTitle = "imageTitle"
//        layout.subcaption = "subcaption"
//        layout.trailingCaption = "trailingCaption"
//        layout.trailingSubcaption = "trailingSubcaption"
        layout.image = UIImage(named: imageName)
        let message = MSMessage()
        message.layout = layout
        
        
        var components = URLComponents()
        let ijome = Ijome(imageName, caption!)
        components.queryItems = ijome.queryItems
        message.url = components.url!

        activeConversation?.insert(message, completionHandler: nil)
        dismiss()
    }
    // MARK: Convenience
    
    public func removeAllChildViewControllers() {
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }
    }
}
